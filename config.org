* Global UI

** Don't show startup message

   #+begin_src emacs-lisp
   (setq inhibit-startup-message t)
   #+end_src

** Don't show toolbar
   #+begin_src emacs-lisp
   (tool-bar-mode -1)
   #+end_src


** Use ibuffer
   #+begin_src emacs-lisp
   (defalias 'list-buffers 'ibuffer)
   #+end_src

** Set theme

   #+begin_src emacs-lisp
      (use-package doom-themes
	:straight t
	:config
	(setq doom-themes-enable-bold t)
	(setq doom-themes-enable-italic t)
	(load-theme 'doom-one t)
	(doom-themes-org-config))
   #+end_src


** Completion

   #+begin_src emacs-lisp
     (use-package helm
       :straight t
       :bind (:map helm-map 
	      ("<tab>" . helm-execute-persistent-action))
       :bind* (("M-x" . helm-M-x)
	       ("C-x C-f" . helm-find-files)
	       ("C-x b" . helm-buffers-list)))

     (use-package auto-complete
       :straight t
       :bind (:map ac-menu-map
		   ("C-n" . ac-next)
		   ("C-p" . ac-previous))
       :config
       (setq ac-auto-start 1
	     ac-auto-show-menu 0.1
	     ac-use-menu-map t))

     (use-package company
       :straight t
       :init
       (add-hook 'after-init-hook 'global-company-mode)
       :config
       (setq company-minimum-prefix-length 2
	     company-idle-delay 0.1
	     company-flx-limit 20))

   #+end_src

** Window Management
   #+begin_src emacs-lisp
     (use-package ace-window
       :straight t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
   #+end_src


** Flycheck
   #+begin_src emacs-lisp
    (use-package which-key
      :straight t
      :config (which-key-mode))

    (use-package flycheck
      :straight t
      :init (global-flycheck-mode))

  #+end_src

** Tabs
   #+begin_src emacs-lisp
   (setq indent-tabs-mode nil)
   #+end_src


** Auto-Backup and Auto-Save
   #+begin_src emacs-lisp
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+end_src

* Mode-specific Config

** Org Mode
   
   #+begin_src emacs-lisp
     (use-package org-bullets
       :straight t
       :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src

** Deft
  #+begin_src emacs-lisp
    (use-package deft
      :straight t
      :bind ("<f8>" . deft)
      :commands (deft)
      :init (setq deft-directory "~/repos/notes"
		  deft-text-mode 'org-mode
		  deft-use-filter-string-for-filename t
		  deft-file-naming-rules '((noslash . "-")
					   (nospace . "-")
					   (case-fn . downcase))
		  deft-org-mode-title-prefix t
		  deft-extensions '("org")))
  #+end_src
** Lisp

*** Paredit
    #+begin_src emacs-lisp
      (use-package paredit
	:straight t
	:config
	(add-hook 'lisp-mode-hook #'enable-paredit-mode)
	(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))
    #+end_src

*** Slime
    #+begin_src emacs-lisp
      (use-package slime
	:straight t
	:config
	(setq inferior-lisp-program (executable-find "sbcl")))

      (use-package slime-company
	:after (slime company)
	:straight t
	:config
	(setq slime-company-completion 'fuzzy))

      (slime-setup '(slime-fancy slime-company))
      (show-paren-mode)

    #+end_src

** Magit

   #+begin_src emacs-lisp
     (use-package magit
       :straight t)
   #+end_src

** LSP
   
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :straight t
      :hook (progn
	      (scala-mode . lsp)
	      (lsp-mode . lsp-lens-mode))
      :config (setq lsp-prefer-flymake nil))

    (use-package lsp-ui
      :straight t)

    (use-package company-lsp
      :straight t)
  #+end_src

   
** Scala
   #+begin_src emacs-lisp
     (use-package scala-mode
       :straight t
       :mode "\\.s\\(cala\\|bt\\|c\\)$")

     (use-package lsp-metals
       :straight t)
   #+end_src


** C

 #+begin_src emacs-lisp
   (use-package ccls
     :straight t
     :config
     (setq ccls-executable "/usr/local/bin/ccls")
     :hook ((c-mode c++-mode objc-mode cuda-mode) .
	    (lambda () (require 'ccls) (lsp))))

   (use-package realgud
     :straight t)

   (use-package realgud-lldb
     :straight t)

   (require 'dap-lldb)

   (dap-register-debug-template
     "bitwise"
     (list :type "lldb"
	   :cwd "/Users/erik/repos/bitwise/"
	   :request "launch"
	   :program "debug/bitwise"
	   :name "bitwise"))
 #+end_src

** Julia
 
   #+begin_src emacs-lisp
     (use-package julia-mode
       :straight t)

     (use-package jupyter
       :straight t)
   #+end_src


** Python 
   #+begin_src emacs-lisp
     (use-package elpy
       :straight t
       :init
       (elpy-enable)
       :config 
       (setq elpy-rpc-virtualenv-path 'current))
   #+end_src

* Misc Packages

  #+begin_src emacs-lisp
    (use-package try
      :straight t)
  #+end_src

  #+begin_src emacs-lisp
    (use-package yasnippet
      :straight t)
  #+end_src
